// RUTA: libs/core/domain/tenancy/tsconfig.spec.json
{
  "extends": "./tsconfig.json", // Hereda del tsconfig.json de la librería (que hereda del base)
  "compilerOptions": {
    "outDir": "../../../../dist/out-tsc", // Aunque los tests no suelen emitir, es una convención
    "module": "commonjs", // Jest usualmente trabaja mejor con CommonJS
    "moduleResolution": "node", // Asegurar que sea "node"
    "types": ["jest", "node"], // ¡CRUCIAL! Añade los tipos globales de Jest
    "esModuleInterop": true, // Ya debería estar en base, pero no hace daño
    "allowSyntheticDefaultImports": true // Ya debería estar en base
    // "jsx": "react-jsx", // No necesario para tests de backend/dominio
  },
  "include": [
    // Incluir TODOS los archivos necesarios para que los tests se compilen y ejecuten
    "jest.config.ts", // El propio config de Jest
    "src/**/*.spec.ts", // Todos los archivos de test
    "src/**/*.test.ts",
    "src/**/*.d.ts", // Archivos de declaración de tipos dentro de la lib
    // Es importante incluir también el código fuente que se está testeando
    // para que TypeScript pueda resolver los tipos y el código fuente.
    "src/lib/**/*.ts" // Asegurar que el código fuente también esté en el contexto de este tsconfig
    // Esto permite que los imports relativos como '../events/...' funcionen
    // y que las clases base del shared-kernel (si los paths se resuelven desde base) sean encontradas.
  ],
  "exclude": ["node_modules", "dist"]
}
// RUTA: libs/core/domain/tenancy/tsconfig.spec.json

// apps/pwa-supervisor/tsconfig.app.json
// Autor: Raz Podesta (github @razpodesta, email: raz.podesta@metashark.tech)
// Empresa: MetaShark (I.S.) Florianópolis/SC, Brasil. Año 2025. Todos los derechos reservados.
// Propiedad Intelectual: MetaShark (I.S.)
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "composite": true, // Añadido
    "declaration": true, // Añadido para satisfacer 'composite' (aunque Next.js no lo use para el build final de la app)
    "declarationMap": true, // Recomendado con declaration
    "outDir": "../../dist/out-tsc/apps/pwa-supervisor/app", // Un outDir más específico es bueno para composite
    "module": "esnext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "noEmit": false // CAMBIO: Quitar noEmit o ponerlo a false para satisfacer 'references'.
    // Next.js ignorará esto para su propio proceso de build, pero TS lo necesita para las referencias.
    // Es un poco una peculiaridad de las 'project references'.
    // Alternativamente, si queremos mantener noEmit:true (que tiene sentido para apps Next.js)
    // podríamos eliminar la "reference" a este archivo desde el tsconfig.json padre
    // y confiar en los "include" del tsconfig.json padre,
    // pero las "references" son generalmente la forma moderna.
  },
  "include": [
    "next-env.d.ts",
    ".next/types/**/*.ts",
    "src/**/*.ts",
    "src/**/*.tsx",
    "index.d.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    ".next/cache",
    "jest.config.ts",
    "specs",
    "src/**/*.spec.ts",
    "src/**/*.spec.tsx",
    "src/**/*.test.ts",
    "src/**/*.test.tsx",
    "src/test-setup.ts"
  ]
}
// apps/pwa-supervisor/tsconfig.app.json
/* SECCIÓN DE MEJORAS
[
  {
    "mejora": "Añadido `composite: true`, `declaration: true`, `declarationMap: true` y cambiado `noEmit: false`.",
    "justificacion": "Estas opciones son necesarias para que `tsconfig.app.json` pueda ser correctamente referenciado por `apps/pwa-supervisor/tsconfig.json` usando la propiedad `references`. `composite` habilita la construcción incremental, `declaration` (y `declarationMap`) son a menudo requeridos por `composite`, y los proyectos referenciados usualmente no deben tener `noEmit: true` desde la perspectiva de TypeScript puro, aunque Next.js tenga su propio manejo de emisión.",
    "impacto": "Debería resolver los errores de TypeScript relacionados con las `references` a `tsconfig.app.json`."
  },
  {
    "mejora": "Ajuste de `outDir` para ser más específico.",
    "justificacion": "Cuando se usa `composite: true`, tener un `outDir` más específico por cada proyecto referenciado puede ayudar a evitar conflictos si se emitieran archivos, aunque para una app Next.js no es el `outDir` final.",
    "impacto": "Mejor organización si TypeScript emitiera archivos (lo cual Next.js usualmente previene para el código de la app)."
  }
]
*/
/* NOTAS PARA IMPLEMENTACIÓN FUTURA
[
  {
    "nota": "La interacción de `noEmit: true` (deseable para apps Next.js para que Next.js maneje la emisión) y `references` (que a menudo esperan que los proyectos referenciados puedan emitir declaraciones) es a veces confusa. Poner `noEmit: false` aquí es para satisfacer el chequeo de `references` de TypeScript. Next.js tiene su propia lógica de build que no se verá afectada negativamente por esto en el `tsconfig.app.json`."
  }
]
*/

# .env - Configuración para Desarrollo Local, Pruebas y Referencias de MetaShark
# MetaShark (I.S.) - Todos los derechos reservados. Florianópolis, Brasil 2025.
# Web: https://www.metashark.tech | Contacto: contato@metashark.tech

# ==============================================================================
# ENTORNO DE APLICACIÓN
# ==============================================================================
NODE_ENV=development
PORT=3000

# ==============================================================================
# BASE DE DATOS (PostgreSQL - Local Docker para Desarrollo y Pruebas)
# Estas variables DEBEN coincidir con tu docker-compose.yml
# ==============================================================================
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=dfs_user
POSTGRES_PASSWORD=dfs_password

# --- Base de Datos Principal de Desarrollo ---
# Usada por `prisma/schema.dev.prisma` y la aplicación en modo desarrollo.
POSTGRES_DB_DEV=dfs_invest_flow_dev
DATABASE_URL_DEV="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB_DEV}?schema=public"

# --- Base de Datos de Pruebas (E2E / Integración) ---
# Usada por los scripts de test para crear y destruir una BD aislada.
POSTGRES_DB_TEST=dfs_invest_flow_test
DATABASE_URL_TEST="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB_TEST}?schema=public"

# --- Base de Datos de Producción (o Staging) ---
# Esta es la URL que `prisma/schema.prisma` usará por defecto.
# En desarrollo local, puede apuntar a una BD de desarrollo separada si lo deseas,
# o dejarla comentada y configurarla solo en el entorno de producción/staging.
POSTGRES_DB_PROD=dfs_invest_flow_prod # Nombre de la BD de producción/staging
DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB_PROD}?schema=public"
# Para una instancia real de producción, esta URL apuntaría a tu servidor de BD de producción:
# DATABASE_URL="postgresql://USER_PROD:PASS_PROD@HOST_PROD:PORT_PROD/DB_PROD_NAME?schema=public"

# --- Base de Datos (Supabase - Referencia, comentada para evitar uso accidental) ---
# DATABASE_URL_SUPABASE="postgresql://postgres:TU_PASSWORD_SUPABASE@db.xxxxxxxxxxxxxxxxxxxx.supabase.co:5432/postgres"

# ==============================================================================
# REDIS (Local Docker)
# ==============================================================================
REDIS_HOST=localhost
REDIS_PORT=6969 # Puerto expuesto en docker-compose.yml
# REDIS_PASSWORD= # Descomentar si tu Redis tiene contraseña
REDIS_URL="redis://${REDIS_HOST}:${REDIS_PORT}"
# Si Redis tiene contraseña: REDIS_URL="redis://:TU_PASSWORD_REDIS@${REDIS_HOST}:${REDIS_PORT}"

# ==============================================================================
# API WHATSAPP (Placeholders - ¡REEMPLAZAR CON VALORES REALES!)
# ==============================================================================
WHATSAPP_APP_SECRET=your_whatsapp_app_secret_here
WHATSAPP_ACCESS_TOKEN=your_whatsapp_permanent_access_token_here
WHATSAPP_PHONE_NUMBER_ID=your_whatsapp_phone_number_id_here
WHATSAPP_WEBHOOK_VERIFY_TOKEN=your_strong_and_unique_webhook_verify_token

# ==============================================================================
# API GOOGLE AI / GEMINI (Placeholder - ¡REEMPLAZAR CON VALOR REAL!)
# ==============================================================================
GOOGLE_AI_API_KEY=your_google_ai_api_key_here

# ==============================================================================
# JWT Y SEGURIDAD (Placeholders - ¡REEMPLAZAR CON VALORES REALES Y SEGUROS!)
# ==============================================================================
JWT_SECRET=a_very_strong_and_long_random_secret_for_jwt_!@#$%^&*()
JWT_EXPIRATION=1d # Ejemplo: 1 día. Usar '1h', '7d', etc.
COOKIE_SECRET=another_very_strong_and_long_random_secret_for_cookies_!@#$%^&*()

# ==============================================================================
# CONFIGURACIÓN CORS (Cross-Origin Resource Sharing)
# ==============================================================================
# Para desarrollo, permite el frontend de devhub y potencialmente otros.
# Para producción, sé más restrictivo.
CORS_ALLOWED_ORIGINS=http://localhost:4200,http://localhost:3001
# Ejemplo para múltiples orígenes: CORS_ALLOWED_ORIGINS=http://localhost:4200,https://your-frontend.com

# ==============================================================================
# CONFIGURACIÓN DE LOGGING (Opcional, valores por defecto en main.ts)
# ==============================================================================
# Niveles: 'log', 'error', 'warn', 'debug', 'verbose' (separados por coma)
# LOG_LEVELS=log,error,warn,debug,verbose

# ==============================================================================
# CONFIGURACIÓN DE RATE LIMITER (Anti-Ban, valores por defecto en el adapter)
# ==============================================================================
# RATE_LIMITER_DEFAULT_POINTS=10
# RATE_LIMITER_DEFAULT_DURATION=1 # en segundos
# RATE_LIMITER_STORE=redis # o 'memory' (no recomendado para múltiples instancias)

# ==============================================================================
# CONFIGURACIÓN DE HEALTH SCORE (Anti-Ban, valores por defecto en el adapter)
# ==============================================================================
# DEFAULT_HEALTH_SCORE=100

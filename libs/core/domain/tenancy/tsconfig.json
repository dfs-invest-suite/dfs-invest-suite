// RUTA: libs/core/domain/tenancy/tsconfig.json
{
  "extends": "../../../../tsconfig.base.json", // Correcto, hereda de la raíz
  "compilerOptions": {
    // Opciones específicas para esta librería que podrían anular o añadir a tsconfig.base.json
    // Por ejemplo, si esta librería necesita una opción particular.
    // Por ahora, se asume que la mayoría de las opciones de base son suficientes.
    // Asegurarse que no haya nada aquí que entre en conflicto con tsconfig.lib.json o tsconfig.spec.json.
    "noEmit": true // Las librerías puras de dominio usualmente no emiten JS por sí mismas si no son 'buildable'
    // O se puede quitar si tsconfig.lib.json se encarga de la emisión para builds.
    // Para el chequeo de tipos del editor, noEmit: true es común aquí.
  },
  "files": [], // Dejar vacío, Nx y los tsconfig específicos manejan los archivos
  "include": [
    // Este include es para el type-checking general del editor sobre la librería
    // Debe incluir el código fuente Y los archivos de test para que el editor los entienda.
    "src/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "jest.config.ts" // Excluir config de jest del contexto de "código fuente" principal
  ],
  "references": [
    // No son necesarias referencias aquí si este tsconfig es solo para el editor y
    // los targets de build/test usan tsconfig.lib.json y tsconfig.spec.json directamente.
    // Si se usan project references para builds incrementales con `tsc -b`, sí serían necesarias.
    // Por ahora, para simplificar y dado que Nx maneja los builds, podemos omitirlas.
    // { "path": "./tsconfig.lib.json" },
    // { "path": "./tsconfig.spec.json" }
  ]
}
